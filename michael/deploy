#!/bin/bash

# michael cousins
# march 22, 2014
# shell script to deploy most of my OSX setup to a new place

# styling
bold=`tput bold`
normal=`tput sgr0`

# step 10
# finish everything up
end_script () {
  echo ""
  echo "deploy completed. please restart your terminal application"
  echo "you may want to log out and log back in to ensure everything settles in"
  exit
}

# step 9
# link dotfiles and mackup prefs
link_prefs () {
  echo ""
  echo "step 9 - linking application preferences"
  if [ -f ~/$dots/linkdots ]; then
      echo "linking dotfiles into home directory"
      chmod +x ~/$dots/linkdots
      ~/$dots/linkdots
  fi
  if $mackup; then
    if which mackup > /dev/null 2>&1; then
      echo "restoring application preferences with mackup"
      mackup restore
    else
      echo "mackup was selected, but the mackup application was not found. you can manually complete this step with:"
      echo "brew install mackup && mackup restore"
    fi
  fi
  echo "step 9 complete"
}

# step 8
# set up dropbox
set_up_dropbox () {
  echo ""
  echo "step 8 - set up dropbox so important files can be synced"
  echo "user input required"
  mackup=false
  while ! $mackup; do
    echo -n "are you using mackup in your dropbox? [Y/n]: "; read r
    if [[ ${r:0:1} != 'n' && ${r:0:1} != 'N' ]]; then
      echo -n "what is your mackup directory? [mackup]: "; read mackdir
      if [ ! $mackdir ]; then
        mackdir="mackup"
      fi
    else
      break
    fi
    echo -n "please confirm that your mackup directory is ${bold}~/Dropbox/$mackdir${normal} [Y/n]: "; read r
    if [[ ${r:0:1} != 'n' && ${r:0:1} != 'N' ]]; then
      mackup=true
    fi
  done
  privatedots=false
  while ! $privatedots; do
    echo -n "do you have private dotfiles your dropbox? [Y/n]: "; read r
    if [[ ${r:0:1} != 'n' && ${r:0:1} != 'N' ]]; then
      echo -n "what is your private dotfile directory? [privatedots]: "; read privdots
      if [ ! $privdots ]; then
        privdots="privatedots"
      fi
    else
      break
    fi
    echo -n "please confirm that your private dotfile directory is ${bold}~/Dropbox/$privdots${normal} [Y/n]: "; read r
    if [[ ${r:0:1} != 'n' && ${r:0:1} != 'N' ]]; then
      privatedots=true
    fi
  done
  # open up dropbox app so user can log in
  echo "please log into dropbox"
  echo "once you've logged in, if you selected mackup and/or private dots, you can walk away while those sync"
  open ~/Applications/Dropbox.app
  # wait for mackup to sync
  if $mackup; then
    echo "waiting for mackup files to sync"
    while [ ! -d ~/Dropbox/$mackdir ]; do
      sleep 10;
    done
    echo "mackup directory synced"
  fi
  # wait for private dots to sync
  if $privatedots; then
    echo "waiting for privatedots to sync"
    while [ ! -d ~/Dropbox/$privdots ]; do
      sleep 10;
    done
    echo "private dotfile directory synced"
  fi
  echo "step 8 complete"
}

# step 7
# use hub to clone your dotfiles
clone_dotfiles () {
  echo ""
  echo "step 7 - set up hub and clone your dotfiles"
  echo "user input required"
  # confirm=false
  # while ! $confirm; do
  #   echo -n "enter the name of your dotfiles repository [dotfiles]: "; read dots
  #   if [ ! $dots ]; then
      dots="dotfiles"
  #   fi
  #   echo -n "please confirm that your dotfile repository is ${bold}$dots${normal} [Y/n]: "; read r
  #   if [[ ${r:0:1} != 'n' && ${r:0:1} != 'N' ]]; then
  #     confirm=true
  #   fi
  # done
  # do the actual cloning. ssh keys should've been set up by now
  hub clone -p "$dots" ~/"$dots"
  echo "step 7 complete"
}

# step 6
# install gui applications
install_gui () {
  echo ""
  echo "step 6 - install gui applications"
  curl -fSsl https://raw.github.com/mcous/dotfiles/master/caskfile > Brewfile
  brew bundle
  rm Brewfile
  echo "step 6 complete"
}

# step 5
# install cli applications
install_cli () {
  echo ""
  echo "step 5 - install cli applications"
  curl -fSsl https://raw.github.com/mcous/dotfiles/master/brewfile > Brewfile
  brew bundle
  rm Brewfile
  echo "step 5 complete"
}

# step 4
# install packaged gui applications that require admin password
install_pkg_gui () {
  echo ""
  echo "step 4 - install gui applications that don't live in ~/Applications"
  echo "user input required"
  echo "once you've put your password in, you should be able to walk away for a while"
  echo "get coffee if it's before noon; get beer if it's after"
  curl -fSsl https://raw.github.com/mcous/dotfiles/master/caskfile_pkg > Brewfile
  brew bundle
  rm Brewfile
  echo "step 4 complete"
}

# step 3
# install homebrew
install_homebrew () {
  echo ""
  echo "step 3 - install homebrew"
  installed=false
  while ! $installed; do
    if ! which brew > /dev/null 2>&1; then
      ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
    else
      echo "homebrew already installed. look at you go"
    fi
    if which brew > /dev/null 2>&1; then
      installed=true
      echo "step 3 complete"
    else
      echo "homebrew didn't seem to install correctly."
      echo -n "press enter to try again or ctrl+c to exit "; read r
    fi
  done
}

# step 2
# install the command line tools for xcode
install_xcode_clt () {
  echo ""
  echo "step 2 - install the command line tools for xcode"
  echo "user input required"
  if [[ `sw_vers -productVersion` =~ "10.9" ]]; then
    xcode-select --install
  else
    echo "you're gonna need to install xcode from the mac app store and install the CLT from Xcode's preferences. sorry."
  fi
  installed=false
  echo -n "this could take a while. "
  while ! $installed; do 
    echo -n "press enter whenever xcode is done installing "; read r
    if xcode-select -p > /dev/null 2>&1; then
      installed=true
      echo "step 2 complete"
    else
      echo -n "it doesn't look like it's done yet. "
    fi
  done
} 

# step 1
# function to handle ssh keypair generation
generate_ssh_keypair () {
  echo ""
  echo "step 1 - generate an ssh keypair for the github"
  echo "user input required"
  confirm=false
  while ! $confirm; do
    echo -n "enter your github email address: "; read GH_EMAIL
    echo -n "please confirm that your email address ${bold}$GH_EMAIL${normal} [Y/n]: "; read r
    if [[ ${r:0:1} != 'n' && ${r:0:1} != 'N' ]]; then
      confirm=true
    fi
  done
  echo "generating an ssh keypair with ${bold}$GH_EMAIL${normal}"
  echo "save the keypair in its default location ($HOME/.ssh/id_rsa)"
  ssh-keygen -t rsa -C "$GH_EMAIL"
  ssh-add ~/.ssh/id_rsa
  pbcopy < ~/.ssh/id_rsa.pub
  echo "ssh public key has been copied to the clipboard. to go to github.com and add it to your account, press enter"; read r
  open https://github.com/settings/ssh
  echo "step 1 complete"
}

# function to deploy stuff
set_up_shop () {
  echo "awesome. dibs on top bunk"
  # step 1 - generate an ssh keypair for github
  generate_ssh_keypair
  # step 2 - install the command line tools for xcode
  install_xcode_clt
  # step 3 - install homebrew
  install_homebrew
  # step 4 - install pkg'ed gui apps (including xquartz)
  install_pkg_gui
  # step 5 - install cli apps
  install_cli
  # step 6 - install gui apps
  install_gui
  # step 7 - clone dotfiles
  clone_dotfiles
  # step 8 - set up dropbox and sync important files
  set_up_dropbox
  # step 9 - link dotfiles and mackup
  link_prefs
  # step 10 - end the terminal session
  end_script
}

# prompt the user
echo -n "nice place you got here. tryna set up shop? [y/N]: "; read r
if [[ ${r:0:1} == 'y' || ${r:0:1} == 'Y' ]]; then
  set_up_shop
else
  echo "ok, be that way"
fi
